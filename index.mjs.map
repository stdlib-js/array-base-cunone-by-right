{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\n\n\n// FUNCTIONS //\n\n/**\n* Cumulatively tests whether every array element in a provided array fails a test implemented by a predicate function, while iterating from right-to-left, and assigns the results to elements in the provided output array.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {Collection} output array\n*\n* @example\n* function fcn( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 0, 0, 0 ];\n*\n* var out = [ 0, 0, 0, 0, 0 ];\n* var arr = indexed( x, out, 1, 0, fcn );\n* // returns [ true, true, true, false, false ]\n*/\nfunction indexed( x, out, stride, offset, predicate, thisArg ) {\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\tflg = true;\n\tio = offset;\n\tfor ( i = x.length - 1; i >= 0; i-- ) {\n\t\tif ( flg && predicate.call( thisArg, x[ i ], i, x ) ) {\n\t\t\tflg = false;\n\t\t}\n\t\tout[ io ] = flg;\n\t\tio += stride;\n\t}\n\treturn out;\n}\n\n/**\n* Cumulatively tests whether every array element in a provided array fails a test implemented by a predicate function, while iterating from right-to-left, and assigns the results to elements in the accessor output array.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Object} out - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {Collection} output array\n*\n* @example\n* function fcn( value ) {\n*     return ( value > 0 );\n* }\n*\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 1, 1, 0, 0, 0 ] );\n*\n* var out = toAccessorArray( [ 0, 0, 0, 0, 0 ] );\n* var arr = accessors( arraylike2object( x ), arraylike2object( out ), 1, 0, fcn );\n*\n* var v = arr.get( 4 );\n* // returns false\n*/\nfunction accessors( x, out, stride, offset, predicate, thisArg ) {\n\tvar xdata;\n\tvar odata;\n\tvar xget;\n\tvar oset;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\todata = out.data;\n\n\txget = x.accessors[ 0 ];\n\toset = out.accessors[ 1 ];\n\n\tio = offset;\n\tflg = true;\n\tfor ( i = xdata.length - 1; i >= 0; i-- ) {\n\t\tif ( flg && predicate.call( thisArg, xget( xdata, i ), i, xdata ) ) {\n\t\t\tflg = false;\n\t\t}\n\t\toset( odata, io, flg );\n\t\tio += stride;\n\t}\n\treturn odata;\n}\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether every array element in a provided array fails a test implemented by a predicate function, while iterating from right-to-left, and assigns the results to elements in the output array.\n*\n* @param {Collection} x - input array\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Collection} output array\n*\n* @example\n* function fcn( value ) {\n* \t return ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 0, 0 ];\n*\n* var y = [ false, null, false, null, false, null, false, null ];\n* var out = assign( x, y, 2, 0, fcn );\n* // returns [ true, null, true, null, false, null, false, null ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\nfunction assign( x, out, stride, offset, predicate, thisArg ) {\n\tvar xo;\n\tvar oo;\n\n\txo = arraylike2object( x );\n\too = arraylike2object( out );\n\tif (\n\t\txo.accessorProtocol ||\n\t\too.accessorProtocol\n\t) {\n\t\taccessors( xo, oo, stride, offset, predicate, thisArg );\n\t\treturn out;\n\t}\n\tindexed( x, out, stride, offset, predicate, thisArg );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport filled from '@stdlib/array-base-filled';\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether every array element in a provided array fails a test implemented by a predicate function, while iterating from right-to-left.\n*\n* @param {Collection} x - input array\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Array} output array\n*\n* @example\n* function fcn( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 0, 0, 0 ];\n*\n* var y = cunoneByRight( x, fcn );\n* // returns [ true, true, true, false, false ]\n*/\nfunction cunoneByRight( x, predicate, thisArg ) {\n\tvar out = filled( false, x.length );\n\treturn assign( x, out, 1, 0, predicate, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default cunoneByRight;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cumulatively test whether every array element in a provided array fails a test implemented by a predicate function, while iterating from right-to-left.\n*\n* @module @stdlib/array-base-cunone-by-right\n*\n* @example\n* import cunoneByRight from '@stdlib/array-base-cunone-by-right';\n*\n* function fcn( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 0, 0, 0 ];\n*\n* var y = cunoneByRight( x, fcn );\n* //returns [ true, true, true, false, false ]\n*\n* @example\n* import cunoneByRight from '@stdlib/array-base-cunone-by-right';\n*\n* function fcn( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 0, 0, 0 ];\n*\n* var y1 = cunoneByRight( x, fcn );\n* // returns [ true, true, true, false, false ]\n*\n* var y2 = [ false, null, false, null, false, null, false, null, false, null ];\n* var out = cunoneByRight.assign( x, y2, 2, 0, fcn );\n* // returns [ true, null, true, null, true, null, false, null, false, null ]\n*\n* var bool = ( out === y2 );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["assign","x","out","stride","offset","predicate","thisArg","xo","oo","arraylike2object","accessorProtocol","xdata","odata","xget","oset","flg","io","i","data","accessors","length","call","indexed","cunoneByRight","filled","setReadOnly","main"],"mappings":";;0TAsJA,SAASA,EAAQC,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACnD,IAAIC,EACAC,EAIJ,OAFAD,EAAKE,EAAkBR,GACvBO,EAAKC,EAAkBP,GAEtBK,EAAGG,kBACHF,EAAGE,kBA/DL,SAAoBT,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACtD,IAAIK,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAUJ,IARAN,EAAQV,EAAEiB,KACVN,EAAQV,EAAIgB,KAEZL,EAAOZ,EAAEkB,UAAW,GACpBL,EAAOZ,EAAIiB,UAAW,GAEtBH,EAAKZ,EACLW,GAAM,EACAE,EAAIN,EAAMS,OAAS,EAAGH,GAAK,EAAGA,IAC9BF,GAAOV,EAAUgB,KAAMf,EAASO,EAAMF,EAAOM,GAAKA,EAAGN,KACzDI,GAAM,GAEPD,EAAMF,EAAOI,EAAID,GACjBC,GAAMb,CAGR,CAwCEgB,CAAWZ,EAAIC,EAAIL,EAAQC,EAAQC,EAAWC,GACvCJ,IA/GT,SAAkBD,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACpD,IAAIS,EACAC,EACAC,EAIJ,IAFAF,GAAM,EACNC,EAAKZ,EACCa,EAAIhB,EAAEmB,OAAS,EAAGH,GAAK,EAAGA,IAC1BF,GAAOV,EAAUgB,KAAMf,EAASL,EAAGgB,GAAKA,EAAGhB,KAC/Cc,GAAM,GAEPb,EAAKc,GAAOD,EACZC,GAAMb,CAGR,CAkGCmB,CAASrB,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,GACrCJ,EACR,CCvHA,SAASqB,EAAetB,EAAGI,EAAWC,GAErC,OAAON,EAAQC,EADLuB,GAAQ,EAAOvB,EAAEmB,QACJ,EAAG,EAAGf,EAAWC,EACzC,CCiBAmB,EAAAC,EAAA,SAAA1B"}